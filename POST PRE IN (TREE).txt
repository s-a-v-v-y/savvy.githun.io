public class BinarySearchTree 
{
  class Node 
  {
    int key;
    Node left, right;

    public Node(int item) 
    {
      key = item;
      left = right = null;
    }
  }
  Node root;
  BinarySearchTree() 
  {
    root = null;
  }
  void insert(int key) 
  {
    root = insertKey(root, key);
  }
  Node insertKey(Node root, int key) 
  {
    if (root == null) 
    {
      root = new Node(key);
      return root;
    }
    if (key < root.key)
      root.left = insertKey(root.left, key);
    else if (key > root.key)
      root.right = insertKey(root.right, key);
    return root;
  }
  void postorder() 
  {
    postorderRec(root);
  }
  void postorderRec(Node root) 
  {
    if (root != null) 
    {
      postorderRec(root.left);
      postorderRec(root.right);
      System.out.print(root.key + " -> ");
    }
  }
    void inorder() 
  {
    inorderRec(root);
  }
  void inorderRec(Node root) 
  {
    if (root != null) 
    {
      inorderRec(root.left);
     System.out.print(root.key + " -> ");
      inorderRec(root.right);
    }
  }
void preorder() 
  {
    preorderRec(root);
  }
  void preorderRec(Node root) 
  {
    if (root != null) 
    {
void inorder() 
  {
    inorderRec(root);
  }
  void inorderRec(Node root) 
  {
    if (root != null) 
    {
      inorderRec(root.left);
     System.out.print(root.key + " -> ");
      inorderRec(root.right);
    }
  }
void inorder() 
  {
    inorderRec(root);
  }
  void inorderRec(Node root) 
  {
    if (root != null) 
    {
      inorderRec(root.left);
     System.out.print(root.key + " -> ");
      inorderRec(root.right);
    }
  }
       System.out.print(root.key + " -> ");
      preorderRec(root.left);
      preorderRec(root.right);
    }
  }
  public static void main(String[] args) 
  {
    BinarySearchTree tree = new BinarySearchTree();

    tree.insert(8);
    tree.insert(3);
    tree.insert(1);
    tree.insert(6);
    tree.insert(7);
    tree.insert(10);
    tree.insert(14);
    tree.insert(4);

    System.out.print("Inorder traversal: ");
    tree.inorder();
    System.out.print("\n postorder traversal: ");
    tree.postorder();
   System.out.print("\n preorder traversal: ");
    tree.preorder();
  }
}
